1.dubbo:一个分布式服务框架，就是个远程服务调用的分布式框架（告别web service模式中的wsdl，以服务者与消费者的方式在dubbo上注册）
2.dubbo的作用
 （1）远程方法调用，就像调用本地方法一样调用远程方法，只需要简单配置，没有任何api侵入。
 （2）服务自动注册于发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。
 （3）软负载均衡及容错机制，可在内网替代F5等硬件负载均衡器，降低成本，减少单点。
3.dubbo的使用方法
  Dubbo采用全Spring配置方式，透明化接入应用，对应用没有任何API侵入，只需用Spring加载Dubbo的配置即可，Dubbo基于Spring的Schema扩展进行加载。
  （1）下载zookeeper注册中心，下载地址：http://www.apache.org/dyn/closer.cgi/zookeeper/  下载后解压即可，进入D:\apach-zookeeper-3.4.5\bin，
       双击zkServer.cmd启动注册中心服务。
  （2）定义服务接口
  （3）服务提供方实现接口
  （4）提供方：用spring配置声明暴露服务（实现类、接口、提供方应用信息、使用multicast广播注册中心暴露服务地址、使用zookeer注册中心、使用dubbo协议在端口暴露）
  （5）提供方类，加载spring配置，启动服务。
  （6）消费者：配置应用远程服务（消费方应用名，用multicast广播注册中心暴露服务地址、使用zookeer注册中心，引用远程接口）
  （7）消费者类，加载spring配置文件，使用getBean方法获得接口。
   说白了就是，服务提供方，有一个接口，有一个实现接口的类，然后配置在注册中心注册信息（配置spring）。然后服务消费者则订阅服务获取在注册中心的服务（配置spring），然后消费者通过加载配置文件即可使用接口。
4.调用关系说明
  （1）服务容器负责启动，加载，运行服务提供者
  （2）服务提供者在启动时，向注册中心注册自己提供的服务。
  （3）服务消费者在启动时，向注册中心订阅自己所需的服务。
  （4）注册中心返回服务提供者地址列表给消费者，如果有表更，注册中心将基于长链接推送变更数据给消费者。
  （5）服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再另选一台调用。
  （6）服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。
参考网址：http://www.cnblogs.com/Javame/p/3632473.html
